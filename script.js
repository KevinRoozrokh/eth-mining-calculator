
    var data = [
        'Custom,20,200,200',
        'Radeon HD 7990,50,375,532.00',
        'Radeon HD 7950,20,200,160.00',
        'Radeon HD 7970,24,250,213.00',
        'Radeon R9 280X,25,250,240.00',
        'Radeon R9 270X,18,180,188.00',
        'Radeon R9 270,14.2,150,157.00',
        'Radeon R9 290X,25.46,290,300.00',
        'Radeon R9 380 X,20,190,320.00',
        'Radeon R9 295X2,51,500,804.00',
        'Radeon HD 7950 Boost,16,225,160.00',
        'Radeon R9 390x,27,220,500.00',
        'Radeon HD 7870 XT,13,185,129.00',
        'Radeon HD 7790	10,85,200.00',
        'Radeon R9 280,15.6,200,220.00',
        'Radeon HD 7870,12.2,175,147.00',
        'Radeon HD 7770	8,80,151.00',
        'Radeon R9 290,22.8,275,375.00',
        'Radeon R9 285,15,190,299.00',    
        'Radeon HD 7850,11,130,259.00',  
        'Radeon R9 Nano,22,175,669.00',   
        'Radeon R9 Fury X,26.5,275,900.00',      
        'Radeon R7 260X,4.56,115,147.00', 
        'GeForce GTX 970,17.9,145,412.00',        
        'GeForce GTX 750,7.4,55,120.00',        
        'GeForce GTX 750 Ti,7,40,150.00',        
        'GeForce GTX 680,11,195,120.00',
        'GeForce GTX 780 Ti,18.1,250,373.00',
        'GeForce GTX 960,10,120,259.00',
        'GeForce GTX 650 Ti,5,110,73.00',
        'GeForce GTX 980,18.4,165,659.00',
        'GeForce GTX 760,9.2,170,210.00',
        'GeForce GTX Titan,20,250,670.00',
        'GeForce GTX 780,17.9,250,599.00',
        'GeForce GTX 980 Ti,20,250,743.00',
        'GeForce GTX 660 Ti,6,150,120.00',
        'GeForce GTX Titan Black,19,250,999.00',
        'GeForce GTX Titan X,17,250,900.00',
        'GeForce GTX 770,9,230,450.00',
        'GeForce GTX Titan Z,35,375,2,999.00',        
        'Genesis Cloud Mining,3,0,54.00',
        'Amazon EC2,44,0,0.00'
    ];
    
    function populateHardware(selected,data){
        
        for (var i = 0; i < data.length; i++)
        {
            var option = document.createElement('option');
            option.value = i.toString();
            option.innerHTML = data[i].split(',')[0];
            selected.appendChild(option);
            
            document.getElementById('checkPriceA').href = 'http://amazon.com';
            
        }
    }

    function selectCard(selected)
    {
        document.getElementById('user-hashrate').value = data[selected].split(",")[1];        
        document.getElementById('watts').value         = data[selected].split(",")[2];

        update();
    }

    function update(){

        var network = new Object();
        network.hashrate = Number(document.getElementById('network-hashrate').value);
        network.hashrateIncrement = document.getElementById('networkHasrateIncrement').value / 100;
        network.blocktime = document.getElementById('blocktime').value;
        network.currencyPrice = document.getElementById('ethPrice').value;
        
        network.futureHashrate = function(delayedMonths){
        
            var res = this.hashrate;
            
            for (var i = 0; i < delayedMonths; i++)
            {
                res += res * this.hashrateIncrement;
            }   
            
            return res;                 
        };
        
        var userhashrate = document.getElementById('user-hashrate').value;

        // calculates the amount of currency generated by user in one minute
        var calculateUserCurrencyPerMin = function(userhashrate, network, delayedMonths){
        
            if (typeof delayedMonths === 'undefined') delayedMonths = 0; 
            var blocksPerMin = 60.0 / network.blocktime;
            var networkCurrencyPerMin = blocksPerMin * 5.0;
            
            var userCurrencyPerMin = networkCurrencyPerMin * userhashrate / (network.futureHashrate(delayedMonths) * 1000);
            
            return userCurrencyPerMin;
        };
        var userCurrencyPerMin = calculateUserCurrencyPerMin(userhashrate, network);  
        
        // estimate the generated amount per hour,day,week,month,year if the difficulty stays the same
        var res = (function(min,diff){
            var res = new Object();
        
            res.min = min;
            res.hour = res.min.toString() * 60;
            res.day = res.hour * 24;
            res.week = res.day * 7;
            
            //res.month = res.day * 30;
            res.month = 0;
            var dayinc = Math.pow(1.05,1/30);
            for (var i = 0; i < 30; i++)
                res.month += res.day / Math.pow(dayinc, i);           
            
            res.year = 0;
            for (var i = 0; i < 12; i++)
                res.year += res.month / Math.pow(1.05, i);
            
            return res;
        })(userCurrencyPerMin, network.hashrateIncrement);
        
        // estimate the generated monthly given an expected difficulty increase
        var predictedRev = (function(userhashrate, network){
            var res = [];
                                
            for (var i = 0; i < 12; i++)
            {
                res[i] = calculateUserCurrencyPerMin(userhashrate, network, i) * 60 * 24 * 30;;
            }
            
            return res;
        })(userhashrate, network);
        
        var sumArray = function(arr){ var total = 0.0; for (var i = 0; i < arr.length; i++) total += arr[i]; return total;};				
        
        var kwhPrice = document.getElementById('kwhPrice').value;
        var kwatts = document.getElementById('watts').value / 1000;
        var ethPrice = document.getElementById('ethPrice').value;
        var dailyUsdPerUnit = document.getElementById('dailyUsdPerUnit').value;
        
        
        var hourly = kwatts * kwhPrice + (dailyUsdPerUnit * userhashrate / 24)
        var cost = new Object();

        cost.min = hourly/60;
        cost.hour = hourly;
        cost.day = hourly * 24;
        cost.week = hourly * 24 * 7;
        cost.month = hourly * 24 * 30;
        cost.year = hourly * 24 * 365;
        
        var format = function(n){return Math.round(n*100)/100;};
        
        var renderer = '<table class="table table-striped" style="border:1:px;"><thead><tr><td>Period</td><td>Revenue(ETH)</td><td>Revenue(USD)</td><td>Cost</td></tr></thead>';
        renderer += '<tr><td>Min</td><td>' + format(res.min) + '</td><td>' + format(res.min * ethPrice) + '</td><td>' + format(cost.min) + '</td></tr>';
        renderer += '<tr><td>Hour</td><td>' + format(res.hour) + '</td><td>' + format(res.hour * ethPrice) + '</td><td>' + format(cost.hour) + '</td></tr>';
        renderer += '<tr><td>Day</td><td>' + format(res.day) + '</td><td>' + format(res.day * ethPrice) + '</td><td>' + format(cost.day) + '</td></tr>';
        renderer += '<tr><td>Week</td><td>' + format(res.week) + '</td><td>' + format(res.week * ethPrice) + '</td><td>' + format(cost.week) + '</td></tr>';
        renderer += '<tr><td>Month</td><td>' + format(res.month) + '</td><td>' + format(res.month * ethPrice) + '</td><td>' + format(cost.month) + '</td></tr>';
        renderer += '<tr><td>Year</td><td>' + format(res.year) + '</td><td>' + format(res.year * ethPrice) + '</td><td>' + format(cost.year) + '</td></tr>';
        renderer += '</table>';
        
        
        renderer += '<hr>';
        renderer += '<table class="table table-striped" style="border:1:px;"><thead><tr><td>Month</td><td>Revenue(ETH)</td><td>Revenue(USD)</td><td>Cost(USD)</td></tr></thead>';
        for (var i = 0; i < predictedRev.length; i++)                   
            renderer += '<tr><td>' + i + '</td><td>' + format(predictedRev[i]) + '</td><td>' + format(predictedRev[i] * ethPrice) + '</td><td>' + format(cost.month) + '</td></tr>';
        renderer += '<tr><td>Total</td><td>' + format(sumArray(predictedRev)) + '</td><td>' + format(sumArray(predictedRev) * ethPrice) + '</td><td>' + format(cost.month) + '</td></tr>';
        renderer += '</table>';
        
        document.getElementById('result').innerHTML = renderer;
    }
